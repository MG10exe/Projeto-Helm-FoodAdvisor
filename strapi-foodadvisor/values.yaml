#FRONTEND

foodAdvisorApi:
  labels:
    app: foodadvisor
    component: backend

  deploy:
    name: foodadvisor-backend
    replicas: 1
    image:
      repository: matheusgomes10/foodadvisor-api
      pullPolicy: IfNotPresent
      tag: "latest"
        
  extraApiEnvs:
    - name: DATABASE_CLIENT
      value: postgres
    - name: DATABASE_HOST
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: host
    - name: DATABASE_PORT
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: port
    - name: DATABASE_USERNAME
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: password
    - name: DATABASE_NAME
      valueFrom:
        secretKeyRef:
          name: foodadvisor
          key: database

serviceBackend:
  name: foodadvisor-backend
  type: ClusterIP
  ports:
    port: 80
    targetPort: 1337

ingressBackend:
  name: ingress-backend
  enabled: true
  className: "nginx"
  annotations: {}

  hosts:
    - host: foodadvisor.backend
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: foodadvisor-backend
              port:
               number: 1337
  tls: []

secretBackend:
  name: foodadvisor
  host: strapi-foodadvisor-postgresql
  port: "5432"
  username: strapi
  password: strapi
  database: strapi

#BACKEND

foodAdvisorClient:
  labels:
    app: foodadvisor
    component: frontend

  deploy:
    name: foodadvisor-frontend
    replicas: 1
    image:
      repository: matheusgomes10/foodadvisor-client
      pullPolicy: IfNotPresent
      tag: "latest"

serviceFrontend:
  name: foodadvisor-frontend
  type: ClusterIP
  ports:
    port: 80
    targetPort: 3000

ingressFrontend:
  name: ingress-frontend
  enabled: true
  className: "nginx"
  annotations: {}
  hosts:
    - host: foodadvisor.client
      paths:
        - path: /
          pathType: ImplementationSpecific
          backend:
            service:
              name: foodadvisor-frontend
              port:
                number: 3000
  tls: []

  extraClientEnvs:
  - name: DATABASE_CLIENT
    value: postgres
  - name: DATABASE_HOST
    value: strapi-foodadvisor-postgresql
  - name: DATABASE_PORT
    value: "5432"
  - name: DATABASE_USERNAME
    value: strapi
  - name: DATABASE_PASSWORD
    value: strapi
  - name: DATABASE_NAME
    value: strapi

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

# # Container port for the api container in deployment.yaml
# container:
#   port: 1337

# # First Ingress for the api
# ingress:
#   enabled: true
#   className: "nginx"
#   annotations: {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: foodadvisor.app.com
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# # Additional volumes on the output Deployment definition.
# volumes: []
# # - name: foo
# #   secret:
# #     secretName: mysecret
# #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


# Dependencies for the chart.yaml
#(For more: https://github.com/bitnami/charts/blob/main/bitnami/postgresql/values.yaml)

postgresql:
  auth:
    postgresPassword: strapi
    username: strapi
    password: strapi
    database: strapi